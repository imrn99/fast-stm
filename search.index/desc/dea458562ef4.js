rd_("AjContains the success value0DjCombine two calculations. When one blocks with <code>retry</code>, run \xe2\x80\xa6AhContains the error value0BnFailed due to a regular <code>StmError</code>.AoCreate a new <code>TVar</code>.BjA variable that can be used in a STM-BlockAoReturns the argument unchanged.00000BaCalls <code>U::from(self)</code>.00000BeRead a variable and return the value.AoThe normal way to access a var.BbRun a function with a transaction.DiFailed due to manual cancelling (e.g. a call to <code>abort</code> in \xe2\x80\xa6An<code>retry</code> was called.DhCall <code>abort</code> to abort a transaction and pass the error as \xe2\x80\xa6BfRetry until <code>cond</code> is true.DcCall <code>retry</code> to abort an operation and run the whole \xe2\x80\xa6AaWrite a variable.AnThe normal way to write a var.E`Returns the contained <code>Validated</code> value, consuming <code>self</code>.DbReturns <code>true</code> if the result is <code>Abandoned</code>.CnModify the content of a <code>TVar</code> with the function f.CkCheck if two <code>TVar</code>s refer to the same position.3ChThe call failed, because a variable, the computation \xe2\x80\xa6B`<code>fast-stm</code> benchmarksDkReplaces the value of a <code>TVar</code> with a new one, returning the \xe2\x80\xa6BhError of a single step of a transaction.CjThis library implements software transactional memory, \xe2\x80\xa6BbRun a function with a transaction.CeTransaction was aorted through standard control flow.BaTransaction was manually aborted.BcTransaction completed successfully.EnConverts <code>self: TransactionResult&lt;T, E&gt;</code> to <code>Option&lt;E&gt;</code>, \xe2\x80\xa6EnConverts <code>self: TransactionResult&lt;T, E&gt;</code> to <code>Option&lt;T&gt;</code>, \xe2\x80\xa6CmRun a function atomically by using Software Transactional \xe2\x80\xa6E`Returns the contained <code>Cancelled</code> error, consuming <code>self</code>.FeOptionally run a transaction <code>f</code>. If <code>f</code> fails with a <code>retry()</code>, \xe2\x80\xa61CfTransaction tracks all the read and written variables.Di<code>read_atomic</code> reads a value atomically, without starting a \xe2\x80\xa6DbReturns <code>true</code> if the result is <code>Cancelled</code>.DbReturns <code>true</code> if the result is <code>Validated</code>.<BdAccess the control block of the var.DdConvert a <code>TransactionClosureResult&lt;T, E_A&gt;</code> to \xe2\x80\xa6BoRead a value atomically but return a reference.DdUnwrap <code>Option</code> or call retry if it is <code>None</code>.BbReturn type of a transaction body.CaError of a single step of a fallible transaction.EcReturns <code>true</code> if the result is <code>Cancelled</code> and the value \xe2\x80\xa6EcReturns <code>true</code> if the result is <code>Validated</code> and the value \xe2\x80\xa6BaResult of a fallible transaction.DjReturns the contained <code>Validated</code> value or a default value, \xe2\x80\xa6CmRun a function atomically by using Software Transactional \xe2\x80\xa6BbRun a function with a transaction.BkReturn type of a fallible transaction body.")